import { println, toStr, ifThenElse, createPrototype, makeCase, matchCases, Eq__AnyCmp, Neq_AnyCmp } from "./runtime.js";

;
let Funcs__apply;
let Funcs__flip;
let Funcs__compose;
Funcs__apply = ((Funcs__f) => { return ((Funcs__a) => { return ((Funcs__f)(Funcs__a)) }) });
Funcs__flip = ((Funcs__f) => { return ((Funcs__x) => { return ((Funcs__y) => { return ((((Funcs__f)(Funcs__y)))(Funcs__x)) }) }) });
Funcs__compose = ((Funcs__f) => { return ((Funcs__g) => { return ((Funcs__x) => { return ((Funcs__f)(((Funcs__g)(Funcs__x)))) }) }) });
;
const Funcs__exported__apply = Funcs__apply;
const Funcs__exported__flip = Funcs__flip;
const Funcs__exported__compose = Funcs__compose;
let Arith__arrow;
let Arith__add;
let Arith__sub;
let Arith__mult;
let Arith__div;
let Arith__inc;
let Arith__dec;
Arith__arrow = 4;
Arith__add = ((Arith__a) => { return ((Arith__b) => { return (Arith__a + Arith__b) }) });
Arith__sub = ((Arith__a) => { return ((Arith__b) => { return (Arith__a - Arith__b) }) });
Arith__mult = ((Arith__a) => { return ((Arith__b) => { return (Arith__a * Arith__b) }) });
Arith__div = ((Arith__a) => { return ((Arith__b) => { return (Arith__a / Arith__b) }) });
Arith__inc = ((Arith__add)(1));
Arith__dec = ((((Funcs__exported__flip)(Arith__sub)))(1));
;
const Arith__exported__arrow = Arith__arrow;
const Arith__exported__inc = Arith__inc;
const Arith__exported__dec = Arith__dec;
const Arith__exported__mult = Arith__mult;
const Arith__exported__div = Arith__div;
let test__mult;
let test__div;
let test__n;
let test__name;
let test__x;
let test__f;
let test__fac;
let test__access;
let test__textC;
let test__objC;
let test__obj;
let test__area;
test__mult = Arith__exported__mult;
test__div = Arith__exported__div;
test__n = (9 + (10 * 2));
test__name = (("Am" + "ee") + "r");
test__x = (ifThenElse((test__n > 2), () => 1, () => 4) + 4);
test__f = ((test__x) => { return ((test__y) => { return ifThenElse(Eq__AnyCmp(test__y, null), () => test__x, () => (test__x + test__y)) }) });
test__fac = ((test__n) => { return ifThenElse((test__n < 2), () => 1, () => (test__n * ((test__fac)((test__n - 1))))) });
test__access = (({x: test__obj}) => { return (() => {
	let test__fib;
	
	test__fib = ((test__n) => { return ifThenElse((test__n < 3), () => 1, () => (((test__fib)((test__n - 1))) + ((test__fib)((test__n - 2))))) });
	
	return (((test__n) => { return (((test_____letVar1) => { return (((test_____letVar2) => { return (((test_____letVar3) => { return test_____letVar3 })(((test__fib)(((test__n.$val) + 5))))) })((test__n.$val = ((test__n.$val) * 2)))) })((test__n.$val = ((test__n.$val) + 1)))) })({$val: ((test__obj["y"])["0"])}))
})() });
test__textC = createPrototype({}, {new: ((test__str) => { return createPrototype({}, {text: {$val: test__str}}) })});
test__objC = createPrototype(test__textC, {new: ((test__n) => { return createPrototype((((test__textC["new"]))("Hello")), {x: test__n, getX: ((test__self) => { return ((test__n) => { return (((((test_____accessObj) => { return (((test_____accessObj["id"]))(test_____accessObj)) })(test__self)))(((((test__self["x"])["y"])["0"]) + test__n))) }) }), id: ((test__self) => { return ((test__x) => { return test__x }) })}) }), fromNothing: ((test___) => { return (((test__objC["new"]))(createPrototype({}, {y: createPrototype({}, {0: 1, 1: 2})}))) }), fromNumber: ((test__x) => { return ((test__y) => { return (((test__objC["new"]))(createPrototype({}, {y: createPrototype({}, {0: test__x, 1: test__y})}))) }) })});
test__obj = (((((test__objC["fromNumber"]))(4)))("ABC"));
test__area = ((test__shape) => { return matchCases(test__shape, [[ (constructor_) => constructor_.$constructor == "Square", (test_____matchVar0) => { return (((({n: test__n}) => { return ((((Arith__exported__mult)(test__n)))(test__n)) }))(test_____matchVar0)) } ], [ (constructor_) => constructor_.$constructor == "Circle", (test__cir) => { return ((3.14 * (test__cir["r"])) * (test__cir["r"])) } ]]) });
;
((println)(((((test__f)("My name is ")))(test__name))));
((((test__f)("a")))(null));
((println)(((test__fac)(10))));
((println)(((test__access)(createPrototype(test__obj, {s: "h", m: 3})))));
(((test__access)(createPrototype({}, {x: createPrototype({}, {y: createPrototype({}, {0: 4, 1: 7, 2: "XYZ"}), text: "No!"})}))) + 4);
((println)(((test__area)(makeCase("Square", createPrototype(test__obj, {n: test__n}))))));
(((test__double) => { return ((println)((((((test_____accessObj) => { return (((test_____accessObj["getX"]))(test_____accessObj)) })(test__obj)))(((test__double)(((((Funcs__exported__apply)(((((Funcs__exported__flip)(test__div)))(4)))))(Arith__exported__arrow)))))))) })(((test__n) => { return ((((test__mult)(test__n)))(2)) })));
